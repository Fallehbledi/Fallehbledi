// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model farmer {
  id           Int    @id @default(autoincrement())
  firstName    String
  lastName     String
  email    String  @unique
  password String
  phone    String
  adress   String?
  location  String?
  profileImage String
  status    status @default(pending)
  createdAt  DateTime   @default(now())
  posts post[]
  comments comment[]
  enrollments   enrollement[]
  room          room[]
  cardProd      addedToCard[] 
  // isVerified Boolean  @default(false)
}

enum status {
  pending
  free    
  Standard 
  Premium   
}


model experts {
  id            Int @id @default(autoincrement())
  firstName     String
  lastName      String
  email         String
  phone         String
  bio           String?
  profileImage  String?
  password      String
  role          expertRole    @default(expert)
  enrollments   enrollement[]
  room          room[]
}
enum expertRole {
  expert
  admin
}

model farmtools {
  id          Int @id @default(autoincrement())
  name        String
  description String
  price       Int
  image       String
  category    String
  quantity    Int
}

model currentWeather {
  id           Int @id @default(autoincrement())
  temperature  Int
  weather      String
  humidity     Int
  windspeed    String
  location     String
  date         String
}

model WeatherForecast {
  id              Int @id @default(autoincrement())
  lowTemperature  Int
  highTemperature Int
  date            String
  weather         String
  location        String
}

model prices {
  id    Int @id @default(autoincrement())
  name String
  price Int
  image String
  updatedAt  DateTime @updatedAt
}
model post{
  id              Int @id @default(autoincrement())
  title           String
  content         String
  image           String
  createdAt  DateTime   @default(now())
  farmerId  Int    
  farmer        farmer @relation(fields: [farmerId], references: [id])
  comments comment[]
}
model comment{
id              Int @id @default(autoincrement()) 
comment String 
createdAt  DateTime   @default(now())
postId Int
post post  @relation(fields: [postId], references: [id])
farmerId  Int 
farmer        farmer @relation(fields: [farmerId], references: [id])

}

model news {
  id              Int @id @default(autoincrement())
  title           String 
  content         String
  image           String
}
model message {
  id        Int      @id @default(autoincrement())
  message   String
  createdAt DateTime @default(now())
  senderId  Int
  senderName String
  roomId    String
  room      room     @relation(fields: [roomId], references: [roomid])
}
model room {
  id        Int       @id @default(autoincrement())
  farmerId  Int
  farmer    farmer    @relation(fields: [farmerId], references: [id])
  expertId  Int
  roomid    String    @unique
  expert    experts    @relation(fields: [expertId], references: [id])
  messages  message[]
}
model enrollement {
  id        Int    @id @default(autoincrement())
  farmerId  Int
  expertId  Int
  farmer    farmer @relation(fields: [farmerId], references: [id])
  expert    experts @relation(fields: [expertId], references: [id])
  status    enrollmentStatus  @default(INVALID)
  message   String
  createdAt DateTime          @default(now()) 
}
enum enrollmentStatus {
  VALID
  INVALID
}

model addedToCard {
    id          Int @id @default(autoincrement())
  name        String
  description String
  price       Int
  image       String
  category    String
  quantity    Int
  farmerId  Int    
  farmer        farmer @relation(fields: [farmerId], references: [id])
}